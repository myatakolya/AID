from random import randint
from numpy.linalg import solve as gauss
import numpy as np
from math import exp
from dsmltf import scale, mult_predict, dot, f1_score

# признак статуса: играть пойду (1) или не пойду (0)\

# время - ночь(0) день(1) \
# работа в этот день - есть (1) или нет (0)\
# есть команда - да(1) или нет (0) \
# в какую игру - dota(0) R6(1)  cs(2)
# настроение - хорошее(1) или плохое (0)
# горят ли сроки по лабам - да(1) или нет(0)

#[[6, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0], \
# [2, 0, 1, 1, 0, 0, 1], [2, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0], \
# [3, 1, 0, 0, 0, 0, 0], [3, 1, 0, 2, 0, 1, 0], [3, 0, 0, 2, 1, 0, 1], \
# [5, 1, 0, 2, 0, 0, 1], [3, 0, 0, 0, 0, 1, 0], [5, 0, 1, 1, 0, 1, 1], \
# [6, 0, 0, 0, 0, 1, 1], [1, 1, 0, 2, 0, 0, 0], [6, 0, 1, 0, 1, 1, 1], \
# [3, 0, 1, 1, 0, 0, 1], [1, 1, 0, 2, 1, 0, 0], [2, 0, 0, 1, 1, 1, 0], \
# [2, 0, 1, 0, 0, 1, 0], [0, 0, 1, 2, 1, 0, 1], [6, 0, 0, 2, 1, 0, 1], \
# [4, 0, 1, 0, 1, 1, 0], [4, 1, 0, 2, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], \
# [6, 0, 1, 0, 1, 1, 1], [2, 0, 1, 2, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1], \
# [2, 0, 0, 1, 1, 0, 1], [5, 0, 0, 1, 0, 0, 1], [6, 1, 1, 0, 1, 0, 1], \
# [2, 1, 0, 0, 1, 0, 0], [3, 1, 1, 2, 1, 1, 0], [1, 1, 0, 2, 1, 0, 0], \
# [2, 0, 1, 2, 1, 1, 0], [4, 0, 1, 2, 0, 0, 1], [6, 1, 1, 1, 0, 0, 1], \
# [3, 0, 0, 2, 0, 0, 1], [6, 0, 1, 0, 0, 1, 1], [4, 1, 0, 1, 0, 0, 0], \
# [5, 1, 0, 0, 1, 0, 1], [6, 0, 0, 0, 1, 0, 1], [6, 1, 0, 2, 0, 1, 1], \
# [2, 0, 1, 0, 1, 0, 1], [5, 1, 0, 1, 0, 1, 1], [3, 0, 1, 0, 1, 0, 1], \
# [1, 1, 0, 1, 1, 1, 0], [5, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0], \
# [4, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0], [2, 0, 1, 2, 0, 0, 1], \
# [1, 0, 1, 2, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 2, 0, 1, 0], \
# [3, 1, 0, 1, 1, 0, 0], [4, 1, 1, 1, 0, 0, 0], [5, 0, 1, 0, 0, 1, 1], \
# [1, 1, 1, 2, 1, 0, 0], [4, 1, 1, 0, 1, 1, 0], [2, 0, 1, 2, 0, 0, 1]]


#Гипотеза - играю только в выходные


def data_maker() -> list:
    time = ["Ночь", "День"]
    games = ['Dota', "cs", 'R6']
    data=[]
    for i in range(60):
        arrgs = [randint(0,1),randint(0,1),randint(0,1),randint(0,2),randint(0,1),randint(0,1)]
        print(f"Время - {time[arrgs[0]]}")
        print(f"Работаю ли в этот день? -", bool(arrgs[1]))
        print(f"Есть с кем поиграть? -", bool(arrgs[2]))
        print(f"Во что играем - {games[arrgs[3]]}")
        print(f"Хорошее ли настроение? -", bool(arrgs[4]))
        print(f"Горят сроки по лабам? -", bool(arrgs[5]))
        arrgs.append(int(input("Пойду ли я играть? ")))
        print()
        data.append(arrgs)
    return data

def regression(X,y):
    n = len(y)
    M = []
    b = []
    M.append([sum(x) for x in X]+[n])
    b.append(sum(y))
    for l,xl in enumerate(X):
        M.append([dot(x,xl) for x in X]+[sum(xl)])
        b.append(dot(y,xl))
    beta = gauss(np.array(M,dtype="float64"),np.array(b,dtype="float64"))
    return beta

data = \
[[6, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0], \
[2, 0, 1, 1, 0, 0, 1], [2, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0], \
[3, 1, 0, 0, 0, 0, 0], [3, 1, 0, 2, 0, 1, 0], [3, 0, 0, 2, 1, 0, 1], \
[5, 1, 0, 2, 0, 0, 1], [3, 0, 0, 0, 0, 1, 0], [5, 0, 1, 1, 0, 1, 1], \
[6, 0, 0, 0, 0, 1, 1], [1, 1, 0, 2, 0, 0, 0], [6, 0, 1, 0, 1, 1, 1], \
[3, 0, 1, 1, 0, 0, 1], [1, 1, 0, 2, 1, 0, 0], [2, 0, 0, 1, 1, 1, 0], \
[2, 0, 1, 0, 0, 1, 0], [0, 0, 1, 2, 1, 0, 1], [6, 0, 0, 2, 1, 0, 1], \
[4, 0, 1, 0, 1, 1, 0], [4, 1, 0, 2, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], \
[6, 0, 1, 0, 1, 1, 1], [2, 0, 1, 2, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1], \
[2, 0, 0, 1, 1, 0, 1], [5, 0, 0, 1, 0, 0, 1], [6, 1, 1, 0, 1, 0, 1], \
[2, 1, 0, 0, 1, 0, 0], [3, 1, 1, 2, 1, 1, 0], [1, 1, 0, 2, 1, 0, 0], \
[2, 0, 1, 2, 1, 1, 0], [4, 0, 1, 2, 0, 0, 1], [6, 1, 1, 1, 0, 0, 1], \
[3, 0, 0, 2, 0, 0, 1], [6, 0, 1, 0, 0, 1, 1], [4, 1, 0, 1, 0, 0, 0], \
[5, 1, 0, 0, 1, 0, 1], [6, 0, 0, 0, 1, 0, 1], [6, 1, 0, 2, 0, 1, 1], \
[2, 0, 1, 0, 1, 0, 1], [5, 1, 0, 1, 0, 1, 1], [3, 0, 1, 0, 1, 0, 1], \
[1, 1, 0, 1, 1, 1, 0], [5, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0], \
[4, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0], [2, 0, 1, 2, 0, 0, 1], \
[1, 0, 1, 2, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 2, 0, 1, 0], \
[3, 1, 0, 1, 1, 0, 0], [4, 1, 1, 1, 0, 0, 0], [5, 0, 1, 0, 0, 1, 1], \
[1, 1, 1, 2, 1, 0, 0], [4, 1, 1, 0, 1, 1, 0], [2, 0, 1, 2, 0, 0, 1]]

X = [[],[],[],[],[],[]]
y = [i[-1] for i in data[:-20:]]
for i in range(len(y)):
    if y[i]==1:
        y[i]=0.95
    else:
        y[i]=0.05


dat = scale([i[:-1] for i in data])
for i in range(len(dat[:-20:])):
    for j in range(6):
        X[j].append(dat[i][j])

beta = regression(X,y)
tp, fp, tn, fn = 0,0,0,0
for i in range(40,60):
    Y = mult_predict(dat[i][:-1],beta)
    answer = round(exp(Y)/(1+exp(Y)))
    cor_answer = data[i][-1]
    if cor_answer != answer:
        print(f"Ошибка предсказания, должно быть {data[i][-1]}, а получилось {answer}, data:{data[i]}")
    match answer, cor_answer:
        case 1,1:
            tp += 1
        case 0,1:
            fp += 1
        case 1,0:
            tn += 1
        case 0,0:
            fn += 1

print(tp,fp,tn,fn)
print(f1_score(tp,fp,tn))
